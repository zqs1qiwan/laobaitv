name: Update TVBox Spider Value

on:
  schedule:
    # 每天凌晨 3 点 (UTC 时间) 运行一次
    - cron: '0 3 * * *'
  workflow_dispatch: # 允许手动触发

jobs:
  update-spider:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get New Spider Value with Debug
        id: get_new_spider
        run: |
          echo "Fetching new spider data..."
          # 将内部 URL 参数进行 URL 编码
          URL_PARAM=$(jq -rn --arg url "http://www.饭太硬.com/tv" '$url|@uri')
          FULL_URL="https://ua.fongmi.eu.org/box.php?url=${URL_PARAM}"
          echo "Requesting URL: $FULL_URL"

          # 使用 curl 获取数据，并将原始响应保存到变量
          RAW_RESPONSE=$(curl -fsSL "$FULL_URL")
          CURL_EXIT_CODE=$?

          if [ $CURL_EXIT_CODE -ne 0 ]; then
            echo "::error::Failed to fetch data from URL (curl exit code: $CURL_EXIT_CODE)"
            # 即使 curl 失败，也打印可能的部分响应（如果有的话）
            echo "--- RAW RESPONSE (Curl Failed) ---"
            echo "$RAW_RESPONSE"
            echo "--- END RAW RESPONSE ---"
            exit 1
          fi

          # --- **新增 Debug 信息** ---
          echo "--- RAW RESPONSE ---"
          echo "$RAW_RESPONSE"
          echo "--- END RAW RESPONSE ---"
          # --- Debug 结束 ---

          # 尝试提取 spider 值
          NEW_SPIDER=$(echo "$RAW_RESPONSE" | jq -re '.spider')
          JQ_EXIT_CODE=$?

          if [ $JQ_EXIT_CODE -ne 0 ]; then
            echo "::error::Failed to parse JSON or find .spider key. jq exit code: $JQ_EXIT_CODE"
            # 错误信息中已经包含了 RAW_RESPONSE
            exit 1
          fi

          echo "New spider value fetched successfully: $NEW_SPIDER"
          echo "new_spider_value=$NEW_SPIDER" >> $GITHUB_OUTPUT

      - name: Get Old Spider Value and File Path
        id: get_old_spider
        run: |
          FILE_PATH="test/test/tvbox/laobaitvbox.json" # 确认路径正确
          echo "Reading old spider data from $FILE_PATH..."
          if [ ! -f "$FILE_PATH" ]; then
            echo "::error::File $FILE_PATH not found."
            exit 1
          fi
          OLD_SPIDER=$(jq -re '.spider' "$FILE_PATH")
          JQ_EXIT_CODE=$?
          if [ $JQ_EXIT_CODE -ne 0 ]; then
            echo "::error::Failed to parse JSON or find .spider key in $FILE_PATH"
            exit 1
          fi
          echo "Old spider value found: $OLD_SPIDER"
          echo "old_spider_value=$OLD_SPIDER" >> $GITHUB_OUTPUT
          echo "file_path=$FILE_PATH" >> $GITHUB_OUTPUT

      - name: Compare and Update File
        id: update_file
        if: steps.get_new_spider.outputs.new_spider_value != steps.get_old_spider.outputs.old_spider_value
        run: |
          echo "Spider value has changed. Updating the file..."
          FILE_PATH="${{ steps.get_old_spider.outputs.file_path }}"
          NEW_SPIDER="${{ steps.get_new_spider.outputs.new_spider_value }}"
          jq --arg new_spider "$NEW_SPIDER" '.spider = $new_spider' "$FILE_PATH" > temp_file.json && mv temp_file.json "$FILE_PATH"
          echo "File $FILE_PATH updated."
          echo "changed=true" >> $GITHUB_OUTPUT

      - name: Commit and Push Changes
        if: steps.update_file.outputs.changed == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: Auto-update TVBox spider value"
          file_pattern: ${{ steps.get_old_spider.outputs.file_path }}
          commit_user_name: "GitHub Action Bot"
          commit_user_email: "actions@github.com"
          commit_author: "GitHub Action Bot <actions@github.com>"

      - name: No Changes Needed
        if: steps.get_new_spider.outputs.new_spider_value == steps.get_old_spider.outputs.old_spider_value
        run: echo "Spider value has not changed. No update needed."
